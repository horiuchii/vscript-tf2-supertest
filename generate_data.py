import requests
import json
from dotenv import load_dotenv
import os

load_dotenv()
api_key = os.getenv("API_KEY")

output_str = "//THIS FILE IS AUTOMATICALLY GENERATED BY generate_data.py, DO NOT EVER MAKE MANUAL EDITS TO THIS FILE\n"
output_str_cosmetics = "::COSMETICS<-{"
output_str_taunts = "::TAUNTS<-{"
output_str_unusuals = "::UNUSUALS<-{"
url_items = f'https://api.steampowered.com/IEconItems_440/GetSchemaItems/v0001/?key={api_key}'
url_misc = f'https://api.steampowered.com/IEconItems_440/GetSchemaOverview/v0001/?key={api_key}'

def parse_items_url(next = 0):
    global output_str_cosmetics
    global output_str_taunts
    response = requests.get(url_items, params={'start': next, 'language': 'en'})
    response.encoding = 'utf-8'
    data = response.json()
    for item in data['result']['items']:
        if item['item_class'] == 'tf_wearable':
            output_str_cosmetics += parse_cosmetic_item(item)
        elif 'item_slot' in item and item['item_slot'] == 'taunt':
            output_str_taunts += parse_taunt_item(item)
    
    if 'next' in data['result']:
        next_index = data['result']['next']
        parse_items_url(next_index)
    else:
        output_str_cosmetics += "}\n"
        output_str_taunts += "}\n"

def tf_class_name_to_constant(name):
    return_str = ""
    match name:
        case "Scout":return_str += "TF_CLASS_SCOUT"
        case "Soldier":return_str += "TF_CLASS_SOLDIER"
        case "Pyro":return_str += "TF_CLASS_PYRO"
        case "Demoman":return_str += "TF_CLASS_DEMOMAN"
        case "Heavy":return_str += "TF_CLASS_HEAVY"
        case "Engineer":return_str += "TF_CLASS_ENGINEER"
        case "Medic":return_str += "TF_CLASS_MEDIC"
        case "Sniper":return_str += "TF_CLASS_SNIPER"
        case "Spy":return_str += "TF_CLASS_SPY"
    return return_str

def parse_cosmetic_item(item):
    str_cosmetic_data = ""
    #ignore action slot items and tf_wearable weapons
    if item['item_slot'] != "misc":
        return ""
    
    #ignore cheater items
    if item['defindex'] == 122 or item['defindex'] == 123 or item['defindex'] == 124:
        return ""

    #ignore modelless items
    if item['model_player'] == None:
        return ""

    #start the item def with the defindex
    str_cosmetic_data += f"[{item['defindex']}]={{"
    
    #we want some names of cosmetics to appear differently
    name_override = None
    match item['defindex']:
        case 743: name_override = "Autogrant Pyrovision Goggles"
        case 1057 | 1058 | 1059 | 1060 | 1061 | 1062 | 1063 | 1064 | 1065: name_override = "GateBot Light"

    #set the name of the cosmetic
    if name_override != None:
        str_cosmetic_data += f"name=\"{name_override}\","
    else:
        str_cosmetic_data += "name=\""
        if item['proper_name']:
            str_cosmetic_data += "The "
        str_cosmetic_data += f"{item['item_name']}\","
    
    #set what category of cosmetic is this
    str_cosmetic_data += "type="
    match item['item_type_name']:
        case "Tournament Medal": str_cosmetic_data += "CosmeticType.TournamentMedal"
        case "Community Medal": str_cosmetic_data += "CosmeticType.CommunityMedal"
        case _: str_cosmetic_data += "CosmeticType.Normal"
    str_cosmetic_data += ","

    #get some internal data about the item, just in case
    #str_cosmetic_data += f"\t\tname_internal = \"{item['name']}\"\n"
    #str_cosmetic_data += f"\t\tmodel = \"{item['model_player']}\"\n"
    #str_cosmetic_data += f"\t\timage = \"{item['image_inventory']}\"\n"

    #set the classes used by this cosmetic
    if 'used_by_classes' in item:
        str_cosmetic_data += "classes=["
        for index, class_name in enumerate(item['used_by_classes']):
            if index != 0:
                str_cosmetic_data += " "
            
            str_cosmetic_data += tf_class_name_to_constant(class_name)
        str_cosmetic_data += "],"
    
    #check to see if this is paintable
    if 'capabilities' in item and 'paintable' in item['capabilities']:
        str_cosmetic_data += "paint=true,"
    
    #set the styles the cosmetic has styles and more than one
    if 'styles' in item:
        if len(item['styles']) > 1:
            str_cosmetic_data += "styles=["
            for index, style in enumerate(item['styles']):
                if index != 0:
                    str_cosmetic_data += " "

                str_cosmetic_data += f"\"{style['name']}\""
            str_cosmetic_data += "],"
    
    #we're done here, close out this item
    str_cosmetic_data += "},"
    return str_cosmetic_data

def parse_taunt_item(item):
    str_taunt_data = ""
    #start the item def with the defindex
    str_taunt_data += f"[{item['defindex']}]={{"
    
    #set the name of the taunt
    taunt_name = item['item_name'][7:] #remove the "Taunt: " from the start of the name
    str_taunt_data += f"name=\"{taunt_name[4:] if taunt_name.startswith("The ") else taunt_name}\"," #remove the "The " prefix aswell
    
    #set the classes used by this taunt
    if 'used_by_classes' in item:
        str_taunt_data += "classes=["
        for index, class_name in enumerate(item['used_by_classes']):
            if index != 0:
                str_taunt_data += " "
            
            str_taunt_data += tf_class_name_to_constant(class_name)
        str_taunt_data += "],"
    
    #we're done here, close out this taunt
    str_taunt_data += "},"
    return str_taunt_data

def parse_unusual_data(next = 0):
    global output_str_unusuals
    response = requests.get(url_misc, params={'start': next, 'language': 'en'})
    response.encoding = 'utf-8'
    data = response.json()
    for item in data['result']['attribute_controlled_attached_particles']:
        if item['system'].startswith("killstreak") or item['system'].startswith("weapon"):
            continue
        
        #skip unusuals that dont work
        if item['id'] == 1 or item['id'] == 3 or item['id'] == 5:
            continue

        #skip the blue particle as its always offset by one from the red (besides Aces High)
        if item['system'].endswith("teamcolor_blue"):
            continue
        
        #start the particle def with it's id
        output_str_unusuals += f"[{item['id']}]={{"

        #set the name of the unusual
        output_str_unusuals += f"name=\"{item['name']}\","

        output_str_unusuals += "system="
        #give us the system
        if item['system'].endswith("teamcolor_red"):
            output_str_unusuals += f"\"{item['system'][:~13]}\","
        else:
            output_str_unusuals += f"\"{item['system']}\","
        
        #is this a team colored particle?
        if item['system'].endswith("teamcolor_red"):
            output_str_unusuals += "team=true,"
        
        #aces high has a weird blue particle id that we hardcode
        if item['id'] == 59:
            output_str_unusuals += "blue_id=55,"

        #set the type
        output_str_unusuals += "type="
        output_str_unusuals += "UnusualType.Taunt" if item['system'].startswith("utaunt_") else "UnusualType.Cosmetic"
        output_str_unusuals += ","

        #we're done here, close out this unusual
        output_str_unusuals += "},"
    
    if 'next' in data['result']:
        next_index = data['result']['next']
        parse_unusual_data(next_index)

response = requests.get(url_misc)
if response.status_code == 200:
    print("Generating Cosmetic and Taunt Data....")
    parse_items_url()
    print("DONE!")
    print("Generating Unusual Data....")
    parse_unusual_data()
    output_str_unusuals += "}\n"
    print("DONE!")
    
    output_str += output_str_cosmetics
    output_str += output_str_taunts
    output_str += output_str_unusuals

    print("Writing generated data to file....")
    with open('scripts/vscripts/supertest_generated_data.nut', 'w', encoding="utf-8") as output_file:
        output_file.write(output_str)
    print("DONE!")
    print("Done with everything!")
else:
    print(f"Error: {response.status_code}")

input("")