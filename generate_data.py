import requests
import json
from dotenv import load_dotenv
import os

load_dotenv()
api_key = os.getenv("API_KEY")

output_str = "//THIS FILE IS AUTOMATICALLY GENERATED BY generate_data.py, DO NOT EVER MAKE MANUAL EDITS TO THIS FILE\n"
url_items = f'https://api.steampowered.com/IEconItems_440/GetSchemaItems/v0001/?key={api_key}'
url_misc = f'https://api.steampowered.com/IEconItems_440/GetSchemaOverview/v0001/?key={api_key}'

def parse_cosmetic_data(next = 0):
    global output_str
    response = requests.get(url_items, params={'start': next, 'language': 'en'})
    response.encoding = 'utf-8'
    data = response.json()
    for item in data['result']['items']:
        #only get tf_wearables
        if item['item_class'] != 'tf_wearable':
            continue

        #ignore action slot items and tf_wearable weapons
        if item['item_slot'] != "misc":
            continue

        #ignore medals for now
        if item['item_type_name'] == "Tournament Medal" or item['item_type_name'] == "Community Medal":
            continue

        #ignore cheater items
        if item['defindex'] == 122 or item['defindex'] == 123 or item['defindex'] == 124:
            continue

        #ignore modelless items
        if item['model_player'] == None:
            continue

        #start the item def with the defindex
        output_str += f"\t[{item['defindex']}] = {{\n"
        
        #we want some names of cosmetics to appear differently
        name_override = None
        match item['defindex']:
            case 743: name_override = "Autogrant Pyrovision Goggles"
            case 1057 | 1058 | 1059 | 1060 | 1061 | 1062 | 1063 | 1064 | 1065: name_override = "GateBot Light"

        #set the name of the cosmetic
        if name_override != None:
            output_str += f"\t\tname = \"{name_override}\""
        else:
            output_str += "\t\tname = \""
            if item['proper_name']:
                output_str += "The "
            output_str += f"{item['item_name']}\"\n"
            
        #get some internal data about the item, just in case
        output_str += f"\t\tname_internal = \"{item['name']}\"\n"
        output_str += f"\t\tmodel = \"{item['model_player']}\"\n"
        output_str += f"\t\timage = \"{item['image_inventory']}\"\n"

        #set the classes used by this cosmetic
        if 'used_by_classes' in item:
            output_str += "\t\tclasses = ["
            for index, class_name in enumerate(item['used_by_classes']):
                if index != 0:
                    output_str += " "
                
                match class_name:
                    case "Scout":output_str += "TF_CLASS_SCOUT"
                    case "Soldier":output_str += "TF_CLASS_SOLDIER"
                    case "Pyro":output_str += "TF_CLASS_PYRO"
                    case "Demoman":output_str += "TF_CLASS_DEMOMAN"
                    case "Heavy":output_str += "TF_CLASS_HEAVY"
                    case "Engineer":output_str += "TF_CLASS_ENGINEER"
                    case "Medic":output_str += "TF_CLASS_MEDIC"
                    case "Sniper":output_str += "TF_CLASS_SNIPER"
                    case "Spy":output_str += "TF_CLASS_SPY"
            output_str += "]\n"
        
        #check to see if this is paintable
        if 'capabilities' in item and 'paintable' in item['capabilities']:
            output_str += "\t\tpaint = true\n"
        
        #set the styles the cosmetic has
        if 'styles' in item:
            output_str += "\t\tstyles = ["
            for index, style in enumerate(item['styles']):
                if index != 0:
                    output_str += " "

                output_str += f"\"{style['name']}\""
            output_str += "]\n"
        
        #we're done here, close out this item
        output_str += "\t},\n"
    
    if 'next' in data['result']:
        next_index = data['result']['next']
        parse_cosmetic_data(next_index)

def parse_taunt_data(next = 0):
    global output_str
    response = requests.get(url_items, params={'start': next, 'language': 'en'})
    response.encoding = 'utf-8'
    data = response.json()
    for item in data['result']['items']:
        if 'item_slot' in item and item['item_slot'] == 'taunt':
            #start the item def with the defindex
            output_str += f"\t[{item['defindex']}] = {{\n"
            
            #set the name of the taunt
            taunt_name = item['item_name'][7:] #remove the "Taunt: " from the start of the name
            output_str += f"\t\tname = \"{taunt_name[4:] if taunt_name.startswith("The ") else taunt_name}\"\n" #remove the "The " prefix aswell
            
            #set the classes used by this taunt
            if 'used_by_classes' in item:
                output_str += "\t\tclasses = ["
                for index, class_name in enumerate(item['used_by_classes']):
                    if index != 0:
                        output_str += " "
                    
                    match class_name:
                        case "Scout":output_str += "TF_CLASS_SCOUT"
                        case "Soldier":output_str += "TF_CLASS_SOLDIER"
                        case "Pyro":output_str += "TF_CLASS_PYRO"
                        case "Demoman":output_str += "TF_CLASS_DEMOMAN"
                        case "Heavy":output_str += "TF_CLASS_HEAVY"
                        case "Engineer":output_str += "TF_CLASS_ENGINEER"
                        case "Medic":output_str += "TF_CLASS_MEDIC"
                        case "Sniper":output_str += "TF_CLASS_SNIPER"
                        case "Spy":output_str += "TF_CLASS_SPY"
                output_str += "]\n"
            
            #we're done here, close out this taunt
            output_str += "\t},\n"
    
    if 'next' in data['result']:
        next_index = data['result']['next']
        parse_taunt_data(next_index)

def parse_unusual_data(next = 0):
    global output_str
    response = requests.get(url_misc, params={'start': next, 'language': 'en'})
    response.encoding = 'utf-8'
    data = response.json()
    for item in data['result']['attribute_controlled_attached_particles']:
        if item['system'].startswith("killstreak") or item['system'].startswith("weapon"):
            continue
        
        #skip unusuals that dont work
        if item['id'] == 1 or item['id'] == 3 or item['id'] == 5:
            continue

        #skip the blue particle as its always offset by one from the red (besides Aces High)
        if item['system'].endswith("teamcolor_blue"):
            continue
        
        #start the particle def with it's id
        output_str += f"\t[{item['id']}] = {{\n"

        #set the name of the unusual
        output_str += f"\t\tname = \"{item['name']}\"\n"

        #give us the system
        if item['system'].endswith("teamcolor_red"):
            output_str += f"\t\tsystem = \"{item['system'][:~13]}\"\n"
        else:
            output_str += f"\t\tsystem = \"{item['system']}\"\n"
        
        #is this a team colored particle?
        if item['system'].endswith("teamcolor_red"):
            output_str += "\t\tteam = true\n"
        
        #aces high has a weird blue particle id that we hardcode
        if item['id'] == 59:
            output_str += "\t\tblue_id = 55\n"

        #set the type
        output_str += "\t\ttype = "
        output_str += "UnusualType.Taunt" if item['system'].startswith("utaunt_") else "UnusualType.Cosmetic"
        output_str += "\n"

        #we're done here, close out this unusual
        output_str += "\t},\n"
    
    if 'next' in data['result']:
        next_index = data['result']['next']
        parse_unusual_data(next_index)

def debug_parse_raw(next = 0):
    global output_str
    response = requests.get(url_items, params={'start': next, 'language': 'en'})
    response.encoding = 'utf-8'
    data = response.json()
    output_str += json.dumps(data, indent=4)
    
    if 'next' in data['result']:
        next_index = data['result']['next']
        debug_parse_raw(next_index)

response = requests.get(url_misc)
if response.status_code == 200:
    output_str += "::COSMETICS <- {\n"
    print("Generating Cosmetic Data....")
    parse_cosmetic_data()
    print("DONE!")
    output_str += "}\n"
    output_str += "\n::TAUNTS <- {\n"
    print("Generating Taunt Data....")
    parse_taunt_data()
    print("DONE!")
    output_str += "}\n"
    output_str += "\n::UNUSUALS <- {\n"
    print("Generating Unusual Data....")
    parse_unusual_data()
    print("DONE!")
    output_str += "}\n"
    # debug_parse_raw()
    print("Writing generated data to file....")
    with open('scripts/vscripts/supertest_generated_data.nut', 'w', encoding="utf-8") as output_file:
        output_file.write(output_str)
    print("DONE!")
    print("Done with everything!")
else:
    print(f"Error: {response.status_code}")

input("")